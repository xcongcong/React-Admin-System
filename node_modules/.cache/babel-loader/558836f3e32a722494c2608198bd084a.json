{"ast":null,"code":"import \"antd/es/button/style/css\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style/css\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style/css\";\nimport _Input from \"antd/es/input\";\nimport \"antd/es/icon/style/css\";\nimport _Icon from \"antd/es/icon\";\nvar _jsxFileName = \"C:\\\\Users\\\\like04\\\\Desktop\\\\React\\u540E\\u53F0\\u5B66\\u4E60\\\\react-admin-system\\\\src\\\\pages\\\\login\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport './login.css';\nimport logo from './images/LOGO.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n//引入antd\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = event => {\n      event.preventDefault(); //阻止事件默认行为(阻止表单自动提交然后跳转到其他页面)\n\n      const form = this.props.form; //得到form对象用来获取用户输入数据\n\n      const values = form.getFieldsValue(); //获取表单项的输入数据  调用form中的getFieldsValue方法\n\n      console.log('handleSubmit()', values);\n    };\n  }\n\n  render() {\n    const form = this.props.form; //从高阶组件中传递给子组件Login的props的form属性解构\n\n    const {\n      getFieldDecorator\n    } = form; //得到antd中form的表单验证的 高阶函数 getFieldDecorator()()\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"login-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"\\u77E2\\u6613\\u540E\\u53F0\\u7BA1\\u7406\\u7CFB\\u7EDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"login-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u7528\\u6237\\u767B\\u9646\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(_Form, {\n          onSubmit: this.handleSubmit,\n          className: \"login-form\",\n          children: [/*#__PURE__*/_jsxDEV(_Form.Item, {\n            children: getFieldDecorator('username', {})( /*#__PURE__*/_jsxDEV(_Input, {\n              prefix: /*#__PURE__*/_jsxDEV(_Icon, {\n                type: \"user\",\n                style: {\n                  color: 'rgba(0,0,0,.25)'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 49\n              }, this),\n              placeholder: \"\\u8BF7\\u8F93\\u5165\\u7528\\u6237\\u540D\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 37\n            }, this)) // getFieldDecorator('username', { //第一个值是标识名称，第二个值是配置对象(表单验证的规则),第三个值是 标签\n            //     rules: [{ required: true, message: 'Please input your username!' }],})\n            //     (\n            //         <Input\n            //         prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n            //         placeholder=\"请输入用户名\"\n            //         />,\n            //     )\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(_Form.Item, {\n            children: getFieldDecorator('password', {})( /*#__PURE__*/_jsxDEV(_Input, {\n              prefix: /*#__PURE__*/_jsxDEV(_Icon, {\n                type: \"lock\",\n                style: {\n                  color: 'rgba(0,0,0,.25)'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 53\n              }, this),\n              type: \"password\",\n              placeholder: \"\\u8BF7\\u8F93\\u5165\\u5BC6\\u7801\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(_Form.Item, {\n            children: /*#__PURE__*/_jsxDEV(_Button, {\n              type: \"primary\",\n              htmlType: \"submit\",\n              className: \"login-form-button\",\n              children: \"\\u767B\\u9646\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n\n} //高阶函数\n//接收的参数是个函数 或者 返回值是个函数  常见：定时器、promise、数组遍历的方法forEach map() find()\n//Form.create()() 、 getFieldDecorator()()\n//高阶组件\n//本质是一个函数\n//接收一个组件(被包装组件)，返回一个新的组件(包装组件)，包装组件会向被包装组件传入 特定属性\n//包装Form组件组成一个新的组件:Form(Login)\n\n\nconst WrapLogin = _Form.create()(Login); //antd 3.X官网文档form属性使用规则\n\n\nexport default WrapLogin;","map":{"version":3,"sources":["C:/Users/like04/Desktop/React后台学习/react-admin-system/src/pages/login/index.jsx"],"names":["React","Component","logo","Login","handleSubmit","event","preventDefault","form","props","values","getFieldsValue","console","log","render","getFieldDecorator","color","WrapLogin","create"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;;AACmD;AAEnD,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAE1BG,YAF0B,GAEVC,KAAD,IAAU;AACrBA,MAAAA,KAAK,CAACC,cAAN,GADqB,CACC;;AACtB,YAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAxB,CAFqB,CAEQ;;AAC7B,YAAME,MAAM,GAAGF,IAAI,CAACG,cAAL,EAAf,CAHqB,CAGgB;;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BH,MAA7B;AACH,KAPyB;AAAA;;AAS1BI,EAAAA,MAAM,GAAG;AACL,UAAMN,IAAI,GAAG,KAAKC,KAAL,CAAWD,IAAxB,CADK,CACwB;;AAC7B,UAAM;AAAEO,MAAAA;AAAF,QAAwBP,IAA9B,CAFK,CAEiC;;AACtC,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAA,gCACI;AAAK,UAAA,GAAG,EAAEL,IAAV;AAAgB,UAAA,GAAG,EAAC;AAApB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAS,QAAA,SAAS,EAAC,eAAnB;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAM,UAAA,QAAQ,EAAE,KAAKE,YAArB;AAAmC,UAAA,SAAS,EAAC,YAA7C;AAAA,kCACI,cAAM,IAAN;AAAA,sBAEQU,iBAAiB,CAAC,UAAD,EAAY,EAAZ,CAAjB,eACI;AACI,cAAA,MAAM,eAAE;AAAM,gBAAA,IAAI,EAAC,MAAX;AAAkB,gBAAA,KAAK,EAAE;AAAEC,kBAAAA,KAAK,EAAE;AAAT;AAAzB;AAAA;AAAA;AAAA;AAAA,sBADZ;AAEI,cAAA,WAAW,EAAC;AAFhB;AAAA;AAAA;AAAA;AAAA,oBADJ,CAFR,CAQQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAfR;AAAA;AAAA;AAAA;AAAA,kBADJ,eAmBI,cAAM,IAAN;AAAA,sBAEYD,iBAAiB,CAAC,UAAD,EAAY,EAAZ,CAAjB,eACI;AACI,cAAA,MAAM,eAAE;AAAM,gBAAA,IAAI,EAAC,MAAX;AAAkB,gBAAA,KAAK,EAAE;AAAEC,kBAAAA,KAAK,EAAE;AAAT;AAAzB;AAAA;AAAA;AAAA;AAAA,sBADZ;AAEI,cAAA,IAAI,EAAC,UAFT;AAGI,cAAA,WAAW,EAAC;AAHhB;AAAA;AAAA;AAAA;AAAA,oBADJ;AAFZ;AAAA;AAAA;AAAA;AAAA,kBAnBJ,eA8BI,cAAM,IAAN;AAAA,mCACI;AAAQ,cAAA,IAAI,EAAC,SAAb;AAAuB,cAAA,QAAQ,EAAC,QAAhC;AAAyC,cAAA,SAAS,EAAC,mBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBA9BJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA+CH;;AA3DyB,C,CA6D9B;AACI;AACA;AAEJ;AACG;AACA;AACH;;;AACA,MAAMC,SAAS,GAAG,MAAKC,MAAL,GAAcd,KAAd,CAAlB,C,CAAyC;;;AACzC,eAAea,SAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport './login.css'\r\nimport logo from './images/LOGO.png'\r\nimport { Form, Icon, Input, Button,} from 'antd';  //引入antd\r\n\r\nclass Login extends Component {\r\n    //登陆的时候执行的回调函数\r\n    handleSubmit = (event) =>{\r\n        event.preventDefault()//阻止事件默认行为(阻止表单自动提交然后跳转到其他页面)\r\n        const form = this.props.form //得到form对象用来获取用户输入数据\r\n        const values = form.getFieldsValue() //获取表单项的输入数据  调用form中的getFieldsValue方法\r\n        console.log('handleSubmit()',values)\r\n    }\r\n\r\n    render() {\r\n        const form = this.props.form //从高阶组件中传递给子组件Login的props的form属性解构\r\n        const { getFieldDecorator } = form;   //得到antd中form的表单验证的 高阶函数 getFieldDecorator()()\r\n        return (\r\n            <div className=\"login\">\r\n                <header className=\"login-header\">\r\n                    <img src={logo} alt=\"\" />\r\n                    <h1>矢易后台管理系统</h1>\r\n                </header>\r\n                <section className=\"login-content\">\r\n                    <h2>用户登陆</h2>\r\n                    <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                        <Form.Item>\r\n                            {\r\n                                getFieldDecorator('username',{})(\r\n                                    <Input\r\n                                        prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                        placeholder=\"请输入用户名\"\r\n                                    />\r\n                                )\r\n                                // getFieldDecorator('username', { //第一个值是标识名称，第二个值是配置对象(表单验证的规则),第三个值是 标签\r\n                                //     rules: [{ required: true, message: 'Please input your username!' }],})\r\n                                //     (\r\n                                //         <Input\r\n                                //         prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                //         placeholder=\"请输入用户名\"\r\n                                //         />,\r\n                                //     )\r\n                            }\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                                {\r\n                                    getFieldDecorator('password',{})(\r\n                                        <Input\r\n                                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"请输入密码\"\r\n                                        /> \r\n                                    )\r\n                                }\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                登陆\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n//高阶函数\r\n    //接收的参数是个函数 或者 返回值是个函数  常见：定时器、promise、数组遍历的方法forEach map() find()\r\n    //Form.create()() 、 getFieldDecorator()()\r\n\r\n//高阶组件\r\n   //本质是一个函数\r\n   //接收一个组件(被包装组件)，返回一个新的组件(包装组件)，包装组件会向被包装组件传入 特定属性\r\n//包装Form组件组成一个新的组件:Form(Login)\r\nconst WrapLogin = Form.create()(Login)   //antd 3.X官网文档form属性使用规则\r\nexport default WrapLogin\r\n"]},"metadata":{},"sourceType":"module"}